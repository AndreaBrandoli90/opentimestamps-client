#!/usr/bin/env python3
# Copyright (C) 2015 The python-opentimestamps developers
#
# This file is part of python-opentimestamps.
#
# It is subject to the license terms in the LICENSE file found in the top-level
# directory of this distribution.
#
# No part of python-bitcoinlib, including this file, may be copied, modified,
# propagated, or distributed except according to the terms contained in the
# LICENSE file.

import argparse
import datetime
import json
import logging
import os
import os.path

import bitcoin.rpc
from bitcoin.core import *
from bitcoin.wallet import *

from opentimestamps.blockchain import *
from opentimestamps.core import *


def sha256_fd(fd):
    hash_state = hashlib.sha256()
    chunk = True
    while chunk != b'':
        chunk = fd.read(2 ** 20)
        hash_state.update(chunk)

    return hash_state.digest()


parser = argparse.ArgumentParser(description="OpenTimestamps client.")

parser.add_argument("-q", "--quiet", action="count", default=0,
                    help="Be more quiet.")
parser.add_argument("-v", "--verbose", action="count", default=0,
                    help="Be more verbose. Both -v and -q may be used multiple times.")

subparsers = parser.add_subparsers(title='Subcommands',
                                   description='All operations are done through subcommands:')

# ----- stamp -----
parser_stamp = subparsers.add_parser('stamp', aliases=['s'],
                                     help='Timestamp a file')
parser_stamp.add_argument('--no-nonce', dest='use_nonce', action='store_false', default=True,
                          help='Do not use a nonce in the hash calculation. WARNING: may cause privacy loss!')
parser_stamp.add_argument('file', metavar='FILE', type=argparse.FileType('rb'),
                          help='Filename')

# ----- complete -----
parser_complete = subparsers.add_parser('complete', aliases=['c'],
                                        help='Complete one or more pending (Bitcoin) timestamps.')
parser_complete.add_argument('file', metavar='FILE', type=argparse.FileType('r'),
                             help='Filename')

# ----- verify -----
parser_verify = subparsers.add_parser('verify', aliases=['v'],
                                      help="Verify a timestamps")
parser_verify.add_argument('file', metavar='FILE', type=argparse.FileType('r'),
                           help='Filename')


def stamp_command(args):
    # Compute digests for all files
    file_digest = sha256_fd(args.file)
    logging.debug('Hashed %s -> %s' % (args.file.name, b2x(file_digest)))

    nonce = b''
    if args.use_nonce:
        nonce = os.urandom(32)
        file_digest = hashlib.sha256(nonce + file_digest).digest()

    timestamp_file_path = args.file.name + '.ots.pending'
    with open(timestamp_file_path, 'x') as timestamp_fd:
        addr_hash = hashlib.new('ripemd160', file_digest).digest()

        # make an output
        addr = P2PKHBitcoinAddress.from_bytes(addr_hash)

        txid = args.proxy.sendtoaddress(addr, 6000)
        logging.debug('Paid addr %s with txid %s' % (addr, b2lx(txid)))

        # very primitive!
        pending_timestamp = {'txid': b2lx(txid),
                             'nonce': b2x(nonce),
                             'addr': str(addr)}
        json.dump(pending_timestamp, timestamp_fd, indent=2)


parser_stamp.set_defaults(cmd_func=stamp_command)


def complete_command(args):
    if not args.file.name.endswith('.ots.pending'):
        parser.exit('Pending timestamp file does not end in .ots.pending')

    pending_timestamp = json.load(args.file)
    txid = lx(pending_timestamp['txid'])
    nonce = x(pending_timestamp['nonce'])
    addr = CBitcoinAddress(pending_timestamp['addr'])

    path0 = [PathOp_SHA256(b'', b'')]
    if nonce:
        path0.append(PathOp_SHA256(nonce, b''))
    path0.append(PathOp_RIPEMD160(b'', b''))

    r = args.proxy.getrawtransaction(txid, True)

    if r['blockhash'] is None:
        parser.exit('Transaction %s not yet confirmed' % b2lx(txid))

    blk = args.proxy.getblock(r['blockhash'])

    path1 = path_from_msg_to_txid(addr.to_bytes(), r['tx'])
    path2 = path_from_txid_to_merkleroot(txid, blk)

    path = Path(list(path0) + list(path1) + list(path2))

    sig = BlockHeaderSig.from_CBlockHeader(blk.get_header())

    stamp = Timestamp(path, sig)

    timestamp_file_path = args.file.name[:-8]
    with open(timestamp_file_path, 'x') as timestamp_fd:
        json.dump(stamp.to_json(), timestamp_fd, indent=2)


parser_complete.set_defaults(cmd_func=complete_command)


def verify_command(args):
    if not args.file.name.endswith('.ots'):
        parser.exit('Timestamp file does not end in .ots')

    stamp = Timestamp.from_json(json.load(args.file))

    # check that the first thing we get is the hash as expected, hack!
    assert isinstance(stamp.path[0], PathOp_SHA256)
    assert stamp.path[0].prefix == stamp.path[0].suffix == b''
    stamp.path = Path(stamp.path[1:])

    timestamped_file_path = args.file.name[:-4]
    digest = None
    with open(timestamped_file_path, 'rb') as timestamped_fd:
        digest = sha256_fd(timestamped_fd)
    logging.debug('Hashed %s -> %s' % (timestamped_file_path, b2x(digest)))

    block_index_proxy = BlockIndexProxy(args.proxy)
    nTime = stamp.verify(digest, block_index_proxy)

    timestamp = datetime.datetime.fromtimestamp(nTime)

    logging.info('Success! %s was created on or before %s' %
                 (timestamped_file_path, timestamp.isoformat(' ')))


parser_verify.set_defaults(cmd_func=verify_command)

args = parser.parse_args()
args.parser = parser

args.proxy = bitcoin.rpc.Proxy()

args.verbosity = args.verbose - args.quiet

if args.verbosity == 0:
    logging.root.setLevel(logging.INFO)
elif args.verbosity > 0:
    logging.root.setLevel(logging.DEBUG)
elif args.verbosity == -1:
    logging.root.setLevel(logging.WARNING)
elif args.verbosity < -1:
    logging.root.setLevel(logging.ERROR)

if not hasattr(args, 'cmd_func'):
    parser.error('No command specified')

args.cmd_func(args)

# vim:syntax=python filetype=python
